/* tslint:disable */
/* eslint-disable */
/**
 * Fider API - Posts Endpoint
 * API endpoint for listing posts in Fider
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base"

/**
 *
 * @export
 * @interface ApiV1PostsGet200ResponseInner
 */
export interface ApiV1PostsGet200ResponseInner {
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  number: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  slug: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  description: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  createdAt: string
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerUser}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  user: ApiV1PostsGet200ResponseInnerUser
  /**
   *
   * @type {boolean}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  hasVoted: boolean
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  votesCount: number
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  commentsCount: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  status: ApiV1PostsGet200ResponseInnerStatusEnum
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerResponse}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  response: ApiV1PostsGet200ResponseInnerResponse | null
  /**
   *
   * @type {Array<string>}
   * @memberof ApiV1PostsGet200ResponseInner
   */
  tags: Array<string>
}

export const ApiV1PostsGet200ResponseInnerStatusEnum = {
  Open: "open",
  Planned: "planned",
  Started: "started",
  Completed: "completed",
  Declined: "declined",
} as const

export type ApiV1PostsGet200ResponseInnerStatusEnum =
  (typeof ApiV1PostsGet200ResponseInnerStatusEnum)[keyof typeof ApiV1PostsGet200ResponseInnerStatusEnum]

/**
 *
 * @export
 * @interface ApiV1PostsGet200ResponseInnerResponse
 */
export interface ApiV1PostsGet200ResponseInnerResponse {
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerResponse
   */
  text?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerResponse
   */
  respondedAt?: string
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerResponseUser}
   * @memberof ApiV1PostsGet200ResponseInnerResponse
   */
  user?: ApiV1PostsGet200ResponseInnerResponseUser
  /**
   *
   * @type {object}
   * @memberof ApiV1PostsGet200ResponseInnerResponse
   */
  original?: object | null
}
/**
 *
 * @export
 * @interface ApiV1PostsGet200ResponseInnerResponseUser
 */
export interface ApiV1PostsGet200ResponseInnerResponseUser {
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInnerResponseUser
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerResponseUser
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerResponseUser
   */
  role?: string
}
/**
 *
 * @export
 * @interface ApiV1PostsGet200ResponseInnerUser
 */
export interface ApiV1PostsGet200ResponseInnerUser {
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsGet200ResponseInnerUser
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerUser
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet200ResponseInnerUser
   */
  role?: ApiV1PostsGet200ResponseInnerUserRoleEnum
}

export const ApiV1PostsGet200ResponseInnerUserRoleEnum = {
  Visitor: "visitor",
  Administrator: "administrator",
} as const

export type ApiV1PostsGet200ResponseInnerUserRoleEnum =
  (typeof ApiV1PostsGet200ResponseInnerUserRoleEnum)[keyof typeof ApiV1PostsGet200ResponseInnerUserRoleEnum]

/**
 *
 * @export
 * @interface ApiV1PostsGet400Response
 */
export interface ApiV1PostsGet400Response {
  /**
   *
   * @type {Array<ApiV1PostsGet400ResponseErrorsInner>}
   * @memberof ApiV1PostsGet400Response
   */
  errors?: Array<ApiV1PostsGet400ResponseErrorsInner>
}
/**
 *
 * @export
 * @interface ApiV1PostsGet400ResponseErrorsInner
 */
export interface ApiV1PostsGet400ResponseErrorsInner {
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet400ResponseErrorsInner
   */
  field?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsGet400ResponseErrorsInner
   */
  message?: string
}
/**
 *
 * @export
 * @interface ApiV1PostsNumberGet200Response
 */
export interface ApiV1PostsNumberGet200Response {
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsNumberGet200Response
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsNumberGet200Response
   */
  number: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200Response
   */
  title: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200Response
   */
  slug: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200Response
   */
  description: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200Response
   */
  createdAt: string
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerUser}
   * @memberof ApiV1PostsNumberGet200Response
   */
  user: ApiV1PostsGet200ResponseInnerUser
  /**
   *
   * @type {boolean}
   * @memberof ApiV1PostsNumberGet200Response
   */
  hasVoted: boolean
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsNumberGet200Response
   */
  votesCount: number
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsNumberGet200Response
   */
  commentsCount: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200Response
   */
  status: ApiV1PostsNumberGet200ResponseStatusEnum
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerResponse}
   * @memberof ApiV1PostsNumberGet200Response
   */
  response: ApiV1PostsGet200ResponseInnerResponse | null
  /**
   *
   * @type {Array<string>}
   * @memberof ApiV1PostsNumberGet200Response
   */
  tags: Array<string>
  /**
   *
   * @type {Array<ApiV1PostsNumberGet200ResponseCommentsInner>}
   * @memberof ApiV1PostsNumberGet200Response
   */
  comments?: Array<ApiV1PostsNumberGet200ResponseCommentsInner>
}

export const ApiV1PostsNumberGet200ResponseStatusEnum = {
  Open: "open",
  Planned: "planned",
  Started: "started",
  Completed: "completed",
  Declined: "declined",
} as const

export type ApiV1PostsNumberGet200ResponseStatusEnum =
  (typeof ApiV1PostsNumberGet200ResponseStatusEnum)[keyof typeof ApiV1PostsNumberGet200ResponseStatusEnum]

/**
 *
 * @export
 * @interface ApiV1PostsNumberGet200ResponseCommentsInner
 */
export interface ApiV1PostsNumberGet200ResponseCommentsInner {
  /**
   *
   * @type {number}
   * @memberof ApiV1PostsNumberGet200ResponseCommentsInner
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200ResponseCommentsInner
   */
  content?: string
  /**
   *
   * @type {string}
   * @memberof ApiV1PostsNumberGet200ResponseCommentsInner
   */
  createdAt?: string
  /**
   *
   * @type {ApiV1PostsGet200ResponseInnerResponseUser}
   * @memberof ApiV1PostsNumberGet200ResponseCommentsInner
   */
  user?: ApiV1PostsGet200ResponseInnerResponseUser
}
/**
 *
 * @export
 * @interface ApiV1PostsNumberStatusPutRequest
 */
export interface ApiV1PostsNumberStatusPutRequest {
  /**
   * The new status of the post
   * @type {string}
   * @memberof ApiV1PostsNumberStatusPutRequest
   */
  status: ApiV1PostsNumberStatusPutRequestStatusEnum
  /**
   * An optional description of what is the status on this post
   * @type {string}
   * @memberof ApiV1PostsNumberStatusPutRequest
   */
  text?: string
  /**
   * The number of the post to merge this into (required when status is duplicate)
   * @type {number}
   * @memberof ApiV1PostsNumberStatusPutRequest
   */
  originalNumber?: number
}

export const ApiV1PostsNumberStatusPutRequestStatusEnum = {
  Open: "open",
  Planned: "planned",
  Started: "started",
  Completed: "completed",
  Declined: "declined",
  Duplicate: "duplicate",
} as const

export type ApiV1PostsNumberStatusPutRequestStatusEnum =
  (typeof ApiV1PostsNumberStatusPutRequestStatusEnum)[keyof typeof ApiV1PostsNumberStatusPutRequestStatusEnum]

/**
 *
 * @export
 * @interface ApiV1TagsGet200ResponseInner
 */
export interface ApiV1TagsGet200ResponseInner {
  /**
   *
   * @type {number}
   * @memberof ApiV1TagsGet200ResponseInner
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof ApiV1TagsGet200ResponseInner
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof ApiV1TagsGet200ResponseInner
   */
  slug: string
  /**
   *
   * @type {string}
   * @memberof ApiV1TagsGet200ResponseInner
   */
  color: string
  /**
   *
   * @type {boolean}
   * @memberof ApiV1TagsGet200ResponseInner
   */
  isPublic: boolean
}

/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Retrieves a list of posts with optional filtering and pagination
     * @summary List Posts
     * @param {string} [query] The search keywords
     * @param {ApiV1PostsGetViewEnum} [view] The filter and order to apply
     * @param {number} [limit] The number of entries to return
     * @param {string} [tags] The list of tags to filter by, separated by commas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsGet: async (
      query?: string,
      view?: ApiV1PostsGetViewEnum,
      limit?: number,
      tags?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/posts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (query !== undefined) {
        localVarQueryParameter["query"] = query
      }

      if (view !== undefined) {
        localVarQueryParameter["view"] = view
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (tags !== undefined) {
        localVarQueryParameter["tags"] = tags
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieves a specific post by its number
     * @summary Get Post by Number
     * @param {number} number The number of the post to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberGet: async (
      number: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'number' is not null or undefined
      assertParamExists("apiV1PostsNumberGet", "number", number)
      const localVarPath = `/api/v1/posts/{number}`.replace(
        `{${"number"}}`,
        encodeURIComponent(String(number)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Updates the status of a post and optionally adds a response text
     * @summary Respond to a Post
     * @param {number} number The number of the post to update status
     * @param {ApiV1PostsNumberStatusPutRequest} apiV1PostsNumberStatusPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberStatusPut: async (
      number: number,
      apiV1PostsNumberStatusPutRequest: ApiV1PostsNumberStatusPutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'number' is not null or undefined
      assertParamExists("apiV1PostsNumberStatusPut", "number", number)
      // verify required parameter 'apiV1PostsNumberStatusPutRequest' is not null or undefined
      assertParamExists(
        "apiV1PostsNumberStatusPut",
        "apiV1PostsNumberStatusPutRequest",
        apiV1PostsNumberStatusPutRequest,
      )
      const localVarPath = `/api/v1/posts/{number}/status`.replace(
        `{${"number"}}`,
        encodeURIComponent(String(number)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiV1PostsNumberStatusPutRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
  return {
    /**
     * Retrieves a list of posts with optional filtering and pagination
     * @summary List Posts
     * @param {string} [query] The search keywords
     * @param {ApiV1PostsGetViewEnum} [view] The filter and order to apply
     * @param {number} [limit] The number of entries to return
     * @param {string} [tags] The list of tags to filter by, separated by commas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsGet(
      query?: string,
      view?: ApiV1PostsGetViewEnum,
      limit?: number,
      tags?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ApiV1PostsGet200ResponseInner>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PostsGet(
        query,
        view,
        limit,
        tags,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["PostsApi.apiV1PostsGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Retrieves a specific post by its number
     * @summary Get Post by Number
     * @param {number} number The number of the post to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsNumberGet(
      number: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ApiV1PostsNumberGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PostsNumberGet(number, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["PostsApi.apiV1PostsNumberGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Updates the status of a post and optionally adds a response text
     * @summary Respond to a Post
     * @param {number} number The number of the post to update status
     * @param {ApiV1PostsNumberStatusPutRequest} apiV1PostsNumberStatusPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsNumberStatusPut(
      number: number,
      apiV1PostsNumberStatusPutRequest: ApiV1PostsNumberStatusPutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PostsNumberStatusPut(
          number,
          apiV1PostsNumberStatusPutRequest,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["PostsApi.apiV1PostsNumberStatusPut"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PostsApiFp(configuration)
  return {
    /**
     * Retrieves a list of posts with optional filtering and pagination
     * @summary List Posts
     * @param {string} [query] The search keywords
     * @param {ApiV1PostsGetViewEnum} [view] The filter and order to apply
     * @param {number} [limit] The number of entries to return
     * @param {string} [tags] The list of tags to filter by, separated by commas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsGet(
      query?: string,
      view?: ApiV1PostsGetViewEnum,
      limit?: number,
      tags?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ApiV1PostsGet200ResponseInner>> {
      return localVarFp
        .apiV1PostsGet(query, view, limit, tags, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieves a specific post by its number
     * @summary Get Post by Number
     * @param {number} number The number of the post to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberGet(
      number: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ApiV1PostsNumberGet200Response> {
      return localVarFp
        .apiV1PostsNumberGet(number, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Updates the status of a post and optionally adds a response text
     * @summary Respond to a Post
     * @param {number} number The number of the post to update status
     * @param {ApiV1PostsNumberStatusPutRequest} apiV1PostsNumberStatusPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberStatusPut(
      number: number,
      apiV1PostsNumberStatusPutRequest: ApiV1PostsNumberStatusPutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1PostsNumberStatusPut(
          number,
          apiV1PostsNumberStatusPutRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
  /**
   * Retrieves a list of posts with optional filtering and pagination
   * @summary List Posts
   * @param {string} [query] The search keywords
   * @param {ApiV1PostsGetViewEnum} [view] The filter and order to apply
   * @param {number} [limit] The number of entries to return
   * @param {string} [tags] The list of tags to filter by, separated by commas
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsGet(
    query?: string,
    view?: ApiV1PostsGetViewEnum,
    limit?: number,
    tags?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return PostsApiFp(this.configuration)
      .apiV1PostsGet(query, view, limit, tags, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieves a specific post by its number
   * @summary Get Post by Number
   * @param {number} number The number of the post to retrieve
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsNumberGet(number: number, options?: RawAxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .apiV1PostsNumberGet(number, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Updates the status of a post and optionally adds a response text
   * @summary Respond to a Post
   * @param {number} number The number of the post to update status
   * @param {ApiV1PostsNumberStatusPutRequest} apiV1PostsNumberStatusPutRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public apiV1PostsNumberStatusPut(
    number: number,
    apiV1PostsNumberStatusPutRequest: ApiV1PostsNumberStatusPutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PostsApiFp(this.configuration)
      .apiV1PostsNumberStatusPut(
        number,
        apiV1PostsNumberStatusPutRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * @export
 */
export const ApiV1PostsGetViewEnum = {
  All: "all",
  Recent: "recent",
  MyVotes: "my-votes",
  MostWanted: "most-wanted",
  MostDiscussed: "most-discussed",
  Planned: "planned",
  Started: "started",
  Completed: "completed",
  Declined: "declined",
  Trending: "trending",
} as const
export type ApiV1PostsGetViewEnum =
  (typeof ApiV1PostsGetViewEnum)[keyof typeof ApiV1PostsGetViewEnum]

/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Removes a tag from a specific post
     * @summary Untag a Post
     * @param {number} number The number of the post to remove the tag
     * @param {string} slug The slug of the tag to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberTagsSlugDelete: async (
      number: number,
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'number' is not null or undefined
      assertParamExists("apiV1PostsNumberTagsSlugDelete", "number", number)
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiV1PostsNumberTagsSlugDelete", "slug", slug)
      const localVarPath = `/api/v1/posts/{number}/tags/{slug}`
        .replace(`{${"number"}}`, encodeURIComponent(String(number)))
        .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Adds a tag to a specific post
     * @summary Tag a Post
     * @param {number} number The number of the post to add the tag
     * @param {string} slug The slug of the tag to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberTagsSlugPost: async (
      number: number,
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'number' is not null or undefined
      assertParamExists("apiV1PostsNumberTagsSlugPost", "number", number)
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiV1PostsNumberTagsSlugPost", "slug", slug)
      const localVarPath = `/api/v1/posts/{number}/tags/{slug}`
        .replace(`{${"number"}}`, encodeURIComponent(String(number)))
        .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Retrieves a list of tags. Private Tags are only returned for users with either administrator or collaborator role.
     * @summary List Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TagsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/tags`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication apiKey required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
  return {
    /**
     * Removes a tag from a specific post
     * @summary Untag a Post
     * @param {number} number The number of the post to remove the tag
     * @param {string} slug The slug of the tag to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsNumberTagsSlugDelete(
      number: number,
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PostsNumberTagsSlugDelete(
          number,
          slug,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["TagsApi.apiV1PostsNumberTagsSlugDelete"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Adds a tag to a specific post
     * @summary Tag a Post
     * @param {number} number The number of the post to add the tag
     * @param {string} slug The slug of the tag to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1PostsNumberTagsSlugPost(
      number: number,
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1PostsNumberTagsSlugPost(
          number,
          slug,
          options,
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["TagsApi.apiV1PostsNumberTagsSlugPost"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Retrieves a list of tags. Private Tags are only returned for users with either administrator or collaborator role.
     * @summary List Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1TagsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<ApiV1TagsGet200ResponseInner>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1TagsGet(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap["TagsApi.apiV1TagsGet"]?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TagsApiFp(configuration)
  return {
    /**
     * Removes a tag from a specific post
     * @summary Untag a Post
     * @param {number} number The number of the post to remove the tag
     * @param {string} slug The slug of the tag to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberTagsSlugDelete(
      number: number,
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1PostsNumberTagsSlugDelete(number, slug, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Adds a tag to a specific post
     * @summary Tag a Post
     * @param {number} number The number of the post to add the tag
     * @param {string} slug The slug of the tag to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PostsNumberTagsSlugPost(
      number: number,
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<object> {
      return localVarFp
        .apiV1PostsNumberTagsSlugPost(number, slug, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Retrieves a list of tags. Private Tags are only returned for users with either administrator or collaborator role.
     * @summary List Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1TagsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ApiV1TagsGet200ResponseInner>> {
      return localVarFp
        .apiV1TagsGet(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
  /**
   * Removes a tag from a specific post
   * @summary Untag a Post
   * @param {number} number The number of the post to remove the tag
   * @param {string} slug The slug of the tag to be removed
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public apiV1PostsNumberTagsSlugDelete(
    number: number,
    slug: string,
    options?: RawAxiosRequestConfig,
  ) {
    return TagsApiFp(this.configuration)
      .apiV1PostsNumberTagsSlugDelete(number, slug, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Adds a tag to a specific post
   * @summary Tag a Post
   * @param {number} number The number of the post to add the tag
   * @param {string} slug The slug of the tag to be added
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public apiV1PostsNumberTagsSlugPost(
    number: number,
    slug: string,
    options?: RawAxiosRequestConfig,
  ) {
    return TagsApiFp(this.configuration)
      .apiV1PostsNumberTagsSlugPost(number, slug, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Retrieves a list of tags. Private Tags are only returned for users with either administrator or collaborator role.
   * @summary List Tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagsApi
   */
  public apiV1TagsGet(options?: RawAxiosRequestConfig) {
    return TagsApiFp(this.configuration)
      .apiV1TagsGet(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
